c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(1,(pis[3]*n)),rep(0,(pis[4]*n)),rep(0,(pis[5]*n))),
c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(0,(pis[3]*n)),rep(1,(pis[4]*n)),rep(0,(pis[5]*n))),
c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(0,(pis[3]*n)),rep(0,(pis[4]*n)),rep(1,(pis[5]*n)))
)
#pis1 <- c(1/3,1/3,1/3)
#pis2 <- c(1/6,1/6,1-1/3)
#sigma <- 1/2
test.stat <- rep(0,ntimes)
test.stat2 <- rep(0,ntimes)
#n <- 100
for (i in c(1:ntimes)) {
print(paste0("i = ",i," out of ",ntimes))
#assignmentvector1 <- rmultinom(n,1,pis1)
#assignmentvector2 <- rmultinom(n,1,pis2)
betas <- betaparams[1]*rbeta(n,betaparams[3],betaparams[4]) + betaparams[2]
betas2 <- betaparams[1]*rbeta(n,betaparams[3],betaparams[4]) + betaparams[2]
Xtrue <-betas* t(m1) %*% nus_true
if(if.null) {
Ytrue <-  betas2 * t(m1) %*% nus_true
} else {
Ytrue <-  betas2 * t(m2) %*% nus_true
}
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
Xtilde <- irlba(P1)
Ytilde <- irlba(P2)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat2 <- irlba(A,5)
Yhat2 <- irlba(C,5)
Yhat <- (Yhat2$u[,c(2:5)] %*% diag(Yhat2$d[c(2:5)]) ) /( Yhat2$u[,1] * Yhat2$d[1])
Xhat <- (Xhat2$u[,c(2:5)] %*% diag(Xhat2$d[c(2:5)] )) /( Xhat2$u[,1] * Xhat2$d[1])
#Yhat <- Yhat
#Xtilde <- irlba(P1,3)
#Xtilde <- Xtilde$u[,c(2:3)] / Xtilde$u[,1]
#Ytilde <- irlba(P2,3)
#Ytilde <- Ytilde$u[,c(2:3)] / Ytilde$u[,1]
#find the alignment
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=4)
Xhat.new <- Xhat %*% W
#test.stat.cov[[i]] <-
mn <- norm(Xhat.new - Yhat,"F")^2
#cov1 <- cov(Xhat.new)
#cov2 <- cov(Yhat)
#test.stat[i] <- t(mn) %*% base::solve(cov1 + cov2) %*% mn
test.stat[[i]] <- mn
#l1 <- sqrt(Xtilde$d)
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(2:5)] %*% diag((1/ ( Xtilde$d[c(2:5)])^(1/2) )))/
( Xtilde$u[,1] * ((Xtilde$d[1])^(1/2)) ) )
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(2:5)] %*% diag(( 1/ ( Ytilde$d[c(2:5)])^(1/2) ) ))/
( Ytilde$u[,1] * ((Ytilde$d[1])^(1/2)) ) )
t2 <- sum((lim.obj1 - lim.obj2)^2)
test.stat2[[i]] <- t2
}
return(list(test.stat,test.stat2))
}
library(ggplot2)
betaparams = c(.7,.3,1,1)
n <- 800
test1 <- run_simulation_dcsbm(n =n,ntimes = 200,betaparams = betaparams,if.null=TRUE)
norm(Yhat)
Yhat <- (Yhat2$u[,c(1:5)] %*% diag(Yhat2$d[c(1:5)]) )
Yhat <- Yhat / rowSums ( ( (Yhat2$u[,c(1:5)] %*% diag(Yhat2$d[c(1:5)]) )^2 ))
Xhat <- (Xhat2$u[,c(1:5)] %*% diag(Xhat2$d[c(1:5)] )) #/( Xhat2$u[,1] * Xhat2$d[1])
Xhat <- Xhat / rowSums ( ( (Yhat2$u[,c(1:5)] %*% diag(Yhat2$d[c(1:5)]) )^2 ))
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=4)
Xhat.new <- Xhat %*% W
mn <- norm(Xhat.new - Yhat,"F")^2
test.stat[[i]] <- mn
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(2:5)] %*% diag((1/ ( Xtilde$d[c(2:5)])^(1/2) )))/
( Xtilde$u[,1] * ((Xtilde$d[1])^(1/2)) ) )
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(2:5)] %*% diag(( 1/ ( Ytilde$d[c(2:5)])^(1/2) ) ))/
( Ytilde$u[,1] * ((Ytilde$d[1])^(1/2)) ) )
t2 <- sum((lim.obj1 - lim.obj2)^2)
t2
mn
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:5)] %*% diag((1/ ( Xtilde$d[c(1:5)])^(1/2) ))))
lim.obj1 <- lim.obj1 / rowSums(lim.obj1^2)
dim(rowSums(lim.obj2))
rowSume(lim.obj2)
rowSums(lim.obj2)
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:5)] %*% diag((1/ ( Xtilde$d[c(1:5)])^(1/2) ))))
lim.obj1 <- lim.obj1 / rowSums(lim.obj1^2)
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(1:5)] %*% diag((1/ ( Ytilde$d[c(1:5)])^(1/2) ))))
lim.obj2 <- lim.obj2 / rowSums(lim.obj2^2)
t2 <- sum((lim.obj1 - lim.obj2)^2)
52
62
t2
lim.obj2
lim.obj2^2
dim(lim.obj2)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=4)
Xhat.new <- Xhat %*% W
mn <- norm(Xhat.new - Yhat,"F")^2
test.stat[[i]] <- mn
Xhat.new <- Xhat.new / rowsums(Xhat.new^2)
Yhat <- (Yhat2$u[,c(1:5)]) %*% (diag(Yhat2$d[c(1:5)] )^(1/2))
Xhat <- (Xhat2$u[,c(1:5)]) %*% (diag(Xhat2$d[c(1:5)] )^(1/2)) #) #/( Xhat2$u[,1] * Xhat2$d[1])
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=4)
Xhat.new <- Xhat %*% W
Xhat.new <- Xhat.new / rowSums(Xhat.new^2)
Yhat <- Yhat/rowSums(Yhat^2)
mn <- norm(Xhat.new - Yhat.new,"F")^2
mn <- norm(Xhat.new - Yhat,"F")^2
mn
t2
mn <- norm(Xhat.new - Yhat,"F")^2
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:5)] %*% diag( (Xtilde$d[c(1:5)])^(1/2) ) ))
lim.obj1 <- lim.obj1 / rowSums(lim.obj1^2)
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(1:5)] %*% diag( (Ytilde$d[c(1:5)])^(1/2) ) ))
lim.obj2 <- lim.obj2 / rowSums(lim.obj2^2)
t2 <- sum((lim.obj1 - lim.obj2)^2)
t2
mn
W <- procrustes(Xhat,Yhat,Pi=Pi,p=5)
Xhat.new <- Xhat %*% W
Xhat.new <- Xhat.new / rowSums(Xhat.new^2)
Yhat <- Yhat/rowSums(Yhat^2)
Xhat <- ase(A,5)
Yhat <- ase(C,5)
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=5)
Xhat.new <- Xhat %*% W
Xhat.new <- Xhat.new / rowSums(Xhat.new^2)
Yhat <- Yhat/rowSums(Yhat^2)
Yhat
norm(Yhat[1,])
sum(Yhat[1,]^2)
rowSuma(Xhat.new^2)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- ase(A,5)
Yhat <- ase(C,5)
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=5)
Xhat.new <- Xhat %*% W
Xhat.new <- Xhat.new / sqrt(rowSums(Xhat.new^2))
Yhat <- Yhat/ sqrt(rowSums(Yhat^2))
mn <- norm(Xhat.new - Yhat,"F")^2
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:5)] %*% diag( (Xtilde$d[c(1:5)])^(1/2) ) ))
mn
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:5)] %*% diag(  1/((Xtilde$d[c(1:5)])^(1/2)) ) ))
lim.obj1 <- lim.obj1 / rowSums(lim.obj1^2)
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(1:5)] %*% diag( 1/((Ytilde$d[c(1:5)])^(1/2) ) ) ))
lim.obj2 <- lim.obj2 / rowSums(lim.obj2^2)
t2 <- sum((lim.obj1 - lim.obj2)^2)
t2
lim.obj1
sum(lim.obj1^2)
(lim.obj1 - lim.obj2)
Xhat - lim.obj1
sum(Xhat-lim.obj1)
Xhat
plot(Xhat)
sum(Xhat[1,]^2)
Xhat <- ase(A,5)
Yhat <- ase(C,5)
Xhat
nus <- eigen(B)
m2 <- m1
B <- matrix(c(.2,.8,#.8,.8,.8,
.8,.2))#,.8,.8,.8,
nus <- eigen(B)
nus_true <- nus$vectors %*% diag(abs(nus$values)^(1/2),2,2)#,5,5)
nus <- eigen(B)
B
B <- matrix(c(.2,.8,#.8,.8,.8,
.8,.2),2,2)#,.8,.8,.8,
nus <- eigen(B)
nus_true <- nus$vectors %*% diag(abs(nus$values)^(1/2),2,2)#,5,5)
Ipq <- diag(c(1,-1),2,2)#,-1,-1,-1),5,5)
pis1 <- c(1/2,1/2)#c(1/5,1/5,1/5,1/5,1/5)
pis <- pis1
K <- length(pis)
m1 <- rbind(
c(rep(1,(pis[1*n])),rep(0,(pis[2]*n))),
c(rep(0,(pis[1]*n)),rep(1,(pis[2]*n)))
)
m2 <- m1
m1 <- rbind(
c(rep(1,(pis[1]*n)),rep(0,(pis[2]*n))),
c(rep(0,(pis[1]*n)),rep(1,(pis[2]*n)))
)
m2 <- m1
pis <- pis2
test.stat <- rep(0,ntimes)
test.stat2 <- rep(0,ntimes)
for (i in c(1:ntimes)) {
print(paste0("i = ",i," out of ",ntimes))
#assignmentvector1 <- rmultinom(n,1,pis1)
#assignmentvector2 <- rmultinom(n,1,pis2)
betas <- betaparams[1]*rbeta(n,betaparams[3],betaparams[4]) + betaparams[2]
betas2 <- betaparams[1]*rbeta(n,betaparams[3],betaparams[4]) + betaparams[2]
Xtrue <-betas* t(m1) %*% nus_true
if(if.null) {
Ytrue <-  betas2 * t(m1) %*% nus_true
} else {
Ytrue <-  betas2 * t(m2) %*% nus_true
}
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
Xtilde <- irlba(P1)
Ytilde <- irlba(P2)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- ase(A,5)
Yhat <- ase(C,5)
#find the alignment
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=5)
Xhat.new <- Xhat %*% W
Xhat.new <- Xhat.new / sqrt(rowSums(Xhat.new^2))
Yhat <- Yhat/ sqrt(rowSums(Yhat^2))
#test.stat.cov[[i]] <-
#mn <- norm(Xhat.new - Yhat,"F")^2
#cov1 <- cov(Xhat.new)
#cov2 <- cov(Yhat)
#test.stat[i] <- t(mn) %*% base::solve(cov1 + cov2) %*% mn
mn <- norm(Xhat.new - Yhat,"F")^2
test.stat[[i]] <- mn
#l1 <- sqrt(Xtilde$d)
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:5)] %*% diag(  1/((Xtilde$d[c(1:5)])^(1/2)) ) ))
lim.obj1 <- lim.obj1 / rowSums(lim.obj1^2)
#        /
#          ( Xtilde$u[,1] * ((Xtilde$d[1])^(1/2)) ) )
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(1:5)] %*% diag( 1/((Ytilde$d[c(1:5)])^(1/2) ) ) ))
lim.obj2 <- lim.obj2 / rowSums(lim.obj2^2)
t2 <- sum((lim.obj1 - lim.obj2)^2)
test.stat2[[i]] <- t2
}
betas <- betaparams[1]*rbeta(n,betaparams[3],betaparams[4]) + betaparams[2]
betas2 <- betaparams[1]*rbeta(n,betaparams[3],betaparams[4]) + betaparams[2]
Ytrue <-  betas2 * t(m1) %*% nus_true
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
Xtrue
m1
dim(m1)
nus_true
Ips
Ipq
dim(Xtrue)
Xtrue <-betas* t(m1) %*% nus_true
Ytrue <-  betas2 * t(m1) %*% nus_true
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
Xtilde <- irlba(P1)
Ytilde <- irlba(P2)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- ase(A,5)
Yhat <- ase(C,5)
Xhat <- ase(A,2)
Yhat <- ase(C,2)
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=2)
Xhat.new <- Xhat %*% W
Xhat.new <- Xhat.new / sqrt(rowSums(Xhat.new^2))
Yhat <- Yhat/ sqrt(rowSums(Yhat^2))
mn <- norm(Xhat.new - Yhat,"F")^2
test.stat[[i]] <- mn
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:5)] %*% diag(  1/((Xtilde$d[c(1:5)])^(1/2)) ) ))
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:2)] %*% diag(  1/((Xtilde$d[c(1:2)])^(1/2)) ) ))
lim.obj1 <- lim.obj1 / rowSums(lim.obj1^2)
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(1:2)] %*% diag( 1/((Ytilde$d[c(1:2)])^(1/2) ) ) ))
lim.obj2 <- lim.obj2 / rowSums(lim.obj2^2)
t2 <- sum((lim.obj1 - lim.obj2)^2)
t2
Ytilde$u[,c(1:2)]
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(1:2)] %*% diag( 1/((Ytilde$d[c(1:2)])^(1/2) ) ) ))
lim.obj2
lim.obj2^2
lim.obj2 <- lim.obj2 / rowSums( lim.obj2^2)
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,c(1:2)] %*% diag(  1/((Xtilde$d[c(1:2)])^(1/2)) ) ))
lim.obj1 <- lim.obj1 /sqrt( rowSums(lim.obj1^2)    )
lim.obj2 <- (C - P2) %*%
( ( Ytilde$u[,c(1:2)] %*% diag( 1/((Ytilde$d[c(1:2)])^(1/2) ) ) ))
lim.obj2 <- lim.obj2 / sqrt(rowSums( lim.obj2^2)  )
t2 <- sum((lim.obj1 - lim.obj2)^2)
t2
mn
lim.obj1[1]
lim.obj1[2]
lim.obj1-lim.obj2
norm(lim.obj1-lim.obj2,"F")^2
t2
mn
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat2 <- irlba(A,2)
Yhat2 <- irlba(C,2)
Xhat <- Xhat2$u[,2] / Xhat2$u[1]
Yhat <- Yhat2$u[,2] / Yhat2$u[1]
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=2)
Xhat.new <- Xhat %*% W
Xhat.new <- Xhat.new / sqrt(rowSums(Xhat.new^2))
Yhat <- Yhat/ sqrt(rowSums(Yhat^2))
dim(Xhat.new)
dim(Yhat)
Yhat <- as.matrix(Yhat)
dim(Yhat)
Xhat.new <- Xhat.new / sqrt(rowSums(Xhat.new^2))
Yhat <- Yhat/ sqrt(rowSums(Yhat^2))
mn <- norm(Xhat.new - Yhat,"F")^2
test.stat[[i]] <- mn
mn
Xhat <- Xhat2$u[,2] / Xhat2$u[1]
Yhat <- Yhat2$u[,2] / Yhat2$u[1]
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=2)
Xhat.new <- Xhat %*% W
Yhat <- as.matrix(Yhat)
mn <- norm(Xhat.new - Yhat,"F")^2
mn
lim.obj1 <- (A - P1) %*%
( ( Xtilde$u[,2] %*% diag(  1/((Xtilde$d[2])^(1/2)) ) )) / Xtilde$u[1]
(A - P1) %*%
( ( Xtilde$u[,2] %*% diag(  1/((Xtilde$d[2])) ) ))
Xtilde$u[,2]
dim(Xtilde$u[,2])
lim.obj1 <- (A - P1) %*%
( ( as.matrix(Xtilde$u[,2]) %*% diag(  1/((Xtilde$d[2])) ) )) / Xtilde$u[1]
( ( as.matrix(Xtilde$u[,2]) %*% diag(  1/(Xtilde$d[2]) ) ))
dim(as.matrix(Xtilde$u[,2])
)
dim(diag(1/(Xtilde$d[2])))
Xtilde$d
Xtilde$d[2]
lim.obj1 <- (A - P1) %*%
( ( as.matrix(Xtilde$u[,2]) * 1/(Xtilde$d[2]) )     / Xtilde$u[1] )
lim.obj2 <- (C - P2) %*%
( ( as.matrix(Ytilde$u[,2]) * 1/(Ytilde$d[2]) )     / Ytilde$u[1] )
t2 <- sum((lim.obj1 - lim.obj2)^2)
t2
mn
Xtilde$u[1,1]
n
1/sqrt(800)
dim(Xhat.new)
Xhat
Xhat.new
hist(Xhat.new)
Xhat - Yhat
hist(Xhat-Yhat)
hist(Xhat.new-Yhat)
lim.obj1 <- ((A - P1) %*%
( ( as.matrix(Xtilde$u[,2]) * 1/(Xtilde$d[2]) )   ) )   / Xtilde$u[1]
lim.obj2 <-  ((C - P2) %*%
( ( as.matrix(Ytilde$u[,2]) * 1/(Ytilde$d[2]) ) )    / Ytilde$u[1]
t2 <- sum((lim.obj1 - lim.obj2)^2)
test.stat2[[i]] <- t2
}
return(list(test.stat,test.stat2))
}
library(ggplot2)
betaparams = c(.7,.3,1,1)
n <- 800
#plot.test.stat <- function(betaparams = c(.7,.3,1,1),n=500,ntimes=100,if.null = FALSE) {
test1 <- run_simulation_dcsbm(n =n,ntimes = 200,betaparams = betaparams,if.null=TRUE)
lim.obj2 <-  ((C - P2) %*%
( ( as.matrix(Ytilde$u[,2]) * 1/(Ytilde$d[2]) ) ) )   / Ytilde$u[1]
t2 <- sum((lim.obj1 - lim.obj2)^2)
t2
mn
Xhat.new- Yhat
run_simulation_dcsbm <- function(n=300,ntimes=100,seed=2020,betaparams =c(.5,.5,1,1),if.null = FALSE) {
print(paste("beginning simulation for n =",n))
#alpha <- .05
#results <- list()
#set.seed(seed) #1111 and #1112 is okay
B <- matrix(c(.2,.8,#.8,.8,.8,
.8,.2),2,2)#,.8,.8,.8,
#.8,.8,.2,.8,.8,
#.8,.8,.8,.2,.8,
#.8,.8,.8,.8,.2),5,5)
nus <- eigen(B)
nus_true <- nus$vectors %*% diag(abs(nus$values)^(1/2),2,2)#,5,5)
Ipq <- diag(c(1,-1),2,2)#,-1,-1,-1),5,5)
pis1 <- c(1/2,1/2)#c(1/5,1/5,1/5,1/5,1/5)
#pis2 <- c(1/10,1/10,1/10,1/10,6/10)
pis <- pis1
K <- length(pis)
m1 <- rbind(
c(rep(1,(pis[1]*n)),rep(0,(pis[2]*n))),
c(rep(0,(pis[1]*n)),rep(1,(pis[2]*n)))
)
m2 <- m1
# m1 <- rbind(
#   c(rep(1,(pis[1]*n)),rep(0,(pis[2]*n)),rep(0,(pis[3]*n)),rep(0,(pis[4]*n)),rep(0,(pis[5]*n))),
#   c(rep(0,(pis[1]*n)),rep(1,(pis[2]*n)),rep(0,(pis[3]*n)),rep(0,(pis[4]*n)),rep(0,(pis[5]*n))),
#   c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(1,(pis[3]*n)),rep(0,(pis[4]*n)),rep(0,(pis[5]*n))),
#   c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(0,(pis[3]*n)),rep(1,(pis[4]*n)),rep(0,(pis[5]*n))),
#   c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(0,(pis[3]*n)),rep(0,(pis[4]*n)),rep(1,(pis[5]*n)))
# )
pis <- pis2
# m2 <- rbind(
#   c(rep(1,(pis[1]*n)),rep(0,(pis[2]*n)),rep(0,(pis[3]*n)),rep(0,(pis[4]*n)),rep(0,(pis[5]*n))),
#   c(rep(0,(pis[1]*n)),rep(1,(pis[2]*n)),rep(0,(pis[3]*n)),rep(0,(pis[4]*n)),rep(0,(pis[5]*n))),
#   c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(1,(pis[3]*n)),rep(0,(pis[4]*n)),rep(0,(pis[5]*n))),
#   c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(0,(pis[3]*n)),rep(1,(pis[4]*n)),rep(0,(pis[5]*n))),
#   c(rep(0,(pis[1]*n)),rep(0,(pis[2]*n)),rep(0,(pis[3]*n)),rep(0,(pis[4]*n)),rep(1,(pis[5]*n)))
# )
#pis1 <- c(1/3,1/3,1/3)
#pis2 <- c(1/6,1/6,1-1/3)
#sigma <- 1/2
test.stat <- rep(0,ntimes)
test.stat2 <- rep(0,ntimes)
#n <- 100
for (i in c(1:ntimes)) {
print(paste0("i = ",i," out of ",ntimes))
#assignmentvector1 <- rmultinom(n,1,pis1)
#assignmentvector2 <- rmultinom(n,1,pis2)
betas <- betaparams[1]*rbeta(n,betaparams[3],betaparams[4]) + betaparams[2]
betas2 <- betaparams[1]*rbeta(n,betaparams[3],betaparams[4]) + betaparams[2]
Xtrue <-betas* t(m1) %*% nus_true
if(if.null) {
Ytrue <-  betas2 * t(m1) %*% nus_true
} else {
Ytrue <-  betas2 * t(m2) %*% nus_true
}
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
Xtilde <- irlba(P1)
Ytilde <- irlba(P2)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat2 <- irlba(A,2)
Yhat2 <- irlba(C,2)
Xhat <- Xhat2$u[,2] / Xhat2$u[1]
Yhat <- Yhat2$u[,2] / Yhat2$u[1]
#find the alignment
Pi <- diag(1,n)
W <- procrustes(Xhat,Yhat,Pi=Pi,p=2)
Xhat.new <- Xhat %*% W
Yhat <- as.matrix(Yhat)
mn <- norm(Xhat.new - Yhat,"F")^2
test.stat[[i]] <- mn
lim.obj1 <- ((A - P1) %*%
( ( as.matrix(Xtilde$u[,2]) * 1/(Xtilde$d[2]) )   ) )   / Xtilde$u[1]
lim.obj2 <-  ((C - P2) %*%
( ( as.matrix(Ytilde$u[,2]) * 1/(Ytilde$d[2]) ) ) )   / Ytilde$u[1]
t2 <- sum((lim.obj1 - lim.obj2)^2)
test.stat2[[i]] <- t2
}
return(list(test.stat,test.stat2))
}
library(ggplot2)
betaparams = c(.7,.3,1,1)
n <- 800
test1 <- run_simulation_dcsbm(n =n,ntimes = 200,betaparams = betaparams,if.null=TRUE)
g1 <- test1[[1]]
g2 <- test1[[2]]
dat <- data.frame(hot.test.stat = g1,alt = g2)#,chisq.density = dchisq(g1,df=3))
gg <- ggplot(dat, aes(hot.test.stat)) +
geom_histogram(aes(y = stat(density)),bins=40,col="grey") +
stat_function(
fun = dchisq,
args = list(df = 2),
lwd = 1,
col = 'red'
)
gg
gg <- ggplot(dat, aes(alt)) +
geom_histogram(aes(y = stat(density)),bins=25,col="grey")
gg
gg+
stat_function(
fun = dchisq,
args = list(df = 2),
lwd = 1,
col = 'red'
)
gg+
stat_function(
fun = dchisq,
args = list(df = 1),
lwd = 1,
col = 'red'
)
hist(lim.obj1)
hist(lim.obj2)
Wnew <- procrustes(lim.obj1,lim.obj2,Pi=Pi)
lim.obj1 <- lim.obj1 %*% Wnew
t2 <- sum((lim.obj1 - lim.obj2)^2)
t2
hist(lim.obj1-lim.obj2)
Xhat1.new - Yhat
Xhat.new - Yhat
hist(Xhat.new-Yhat)
